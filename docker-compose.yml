version: '3.5'
networks:
  app-network:
    name: app-network

services:
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - 2181:2181
    networks:
      - app-network

  kafka:
    image: wurstmeister/kafka
    ports:
      - 9092:9092
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka # ifconfig | grep 'inet 192'| awk '{ print $2}'
      KAFKA_CREATE_TOPICS: "actions:1:1"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "healthcheck.sh"]
      interval: 5s
      timeout: 10s
      retries: 5

  mongo:
    image: mongo
    restart: always
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
    networks:
      - app-network

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: root
    networks:
      - app-network

  business-app:
    build:
      context: ./BusinessApp
      dockerfile: Dockerfile
    ports:
      - 8080:8080
    depends_on:
      - kafka
      - zookeeper
      - mongo
    networks:
      - app-network

# TODO uncomment and delete setup.sh when finding better solution for too early starting of action-monitor
#  action-monitor-app:
#    build:
#      context: ./ActionMonitorApp
#      dockerfile: Dockerfile
#    networks:
#      - app-network
#    ports:
#      - 8090:8090
#    depends_on:
#      - kafka
#      - zookeeper


  action-monitor-ui:
    build:
      context: ./ActionMonitorUI
      dockerfile: Dockerfile
    ports:
      - 3000:3000
    environment:
      - CHOKIDAR_USEPOLLING=true
    networks:
      - app-network
